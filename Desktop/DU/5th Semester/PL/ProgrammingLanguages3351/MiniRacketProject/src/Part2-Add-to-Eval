-- TODO: Add the following to Eval.hs for Part 2 of the MiniRacketProject

-- Beginning of additions to Eval.hs for Part 2 of the MiniRacketProject

-- TODO: Add this to your Eval.hs file
-- Evaluate a let expression. This requires evaluating the
-- argument to the identifier. Once that is evaluated, we
-- bind the value to the name in a new environment, then
-- we evaluated the body with this new environment
evalLetExpr :: Evaluator Value
evalLetExpr = do
    (env, LetExpr letName valexpr body) <- next
    case getValue (eval evalExpr (env, valexpr)) of
        -- we got a closure from it, but it doesn't have a name, 
        -- so let's add that to the closure as its 'funname' 
        Right (ClosureValue "" argName funBody cenv) ->
            let env' = Env.bind letName (ClosureValue letName argName funBody cenv) cenv in
                case getValue (eval evalExpr (env', body)) of
                    Right v -> return v
                    Left err -> evalError err
        Right nameval ->
            case getValue (eval evalExpr (bind letName nameval env, body)) of
                Right letval -> return letval
                Left err -> evalError err
        Left err -> evalError err

-- TODO: Implement evalIfExpr
-- Evaluate an if expression, this requires evaluating
-- the first expression in the if, which is the test case.
-- Only until this returns a value will you evaluate one
-- or the other branches. You do NOT evaluate both branches,
-- just the 2nd expression if the test case returns true,
-- and the 3rd expression if the test case returns false
evalIfExpr :: Evaluator Value
evalIfExpr = do
    (env, IfExpr boolexpr texpr fexpr) <- next
    case eval evalExpr (env, boolexpr) of
        Right (BoolValue v, _) ->
            if v
            then
                case eval evalExpr (env, texpr) of
                    Right (v, _) -> return v
                    Left err -> evalError err
            else
                case eval evalExpr (env, fexpr) of
                    Right (v, _) -> return v
                    Left err -> evalError err
        Right _ -> typeError "if <boolexp> ... must evaluate to type bool"
        Left err -> evalError err

-- TODO: implement evaluating a Var
-- Evaluate a Var, this requires looking up the symbol
-- in the current environment. If it's there, we return
-- the value. If it's not, we generate a NoSymbol error
-- via: noSymbol $ "symbol " ++ name ++ " not found"
evalVar :: Evaluator Value
evalVar = do 
    (env, VarExpr name) <- next 
    case Env.lookup name env of
        Just v -> return v
        Nothing -> noSymbol $ "symbol " ++ name ++ " not found"

-- evaluate lambdas, which requires storing the current environment as the closure,
-- this should result in a ClosureVal, which can later be used for apply, if it's 
-- a totally anonymous function, then "" is the function name, otherwise if it was
-- built with a let expression, then the let name is its name.
evalLambdaExpr :: Evaluator Value
evalLambdaExpr = do 
    (env, LambdaExpr formalName body) <- next
    return $ ClosureValue "" formalName body env

-- TODO: Implement callFun
-- callFun expects a closure and a value. Inside the closure, 
-- we find the argument name (which can be used in the body). This
-- argument name is bound to the value in the *Closure's* environment.
-- The body of the function is then evaluated using this environment,
-- not the current environment. 
--
-- To get recursion to work (as an Achievement), you must add
-- the function name to the closure's environment too before you
-- evaluate the expression. This ensures that recursion will work 
-- because if it evaluates the body, it will know that the function 
-- already exists--this call to eval will result in a complicated value
callFun :: Value -> Value -> Either ErrorType Value
callFun c@(ClosureValue funName argName body cenv) argVal =
    let env = bind argName argVal cenv
        env' = bind funName c env in
        getValue $ eval evalExpr (env', body)
callFun _ _ = error "callFun must have a closure passed to it"

-- TODO: Implement function application
-- Evaluate apply, which is a function call to an argument. 
-- The first expression needs to evaluate to a closure from
-- a lambda expression or a let binding. The second expression
-- is is evaluated to give the resulting value to the function.
-- with this, we then use the callFun function to evalute
-- the function call
evalApplyExpr :: Evaluator Value
evalApplyExpr = do
    (env, ApplyExpr funExpr argExpr) <- next
    case getValue (eval evalExpr (env, funExpr)) of
        Right c@(ClosureValue funName argName body cenv) ->
            case getValue (eval evalExpr (env, argExpr)) of
                Right v -> case callFun c v of
                    Right v -> return v
                    Left err -> evalError err
                Left err -> evalError err
        Right _ -> evalError $ EvalError "In apply expressions, (f a), f must evaluate to a function"
        Left err -> evalError err

-- End of additions to Eval.hs for Part 2 of the MiniRacketProject


-- TODO: Add the following to MiniRacketParser.hs
-- Beginning of additions to MiniRacketParser.hs for Part 2 of the
--   MiniRacketProject

-- TODO: add the additional kinds of things that can be an atom:
--   an atom is either a var, a literal, or a negated atom
parseAtom :: Parser Expr
parseAtom = do
    literalExpr

-- TODO: Implement negateAtom
-- negate an atom, we actually only have one choice here. Our
-- parsing already correctly handles negative numbers, and we
-- cannot have negative boolean values. This leaves variables, 
-- but this needs to build a NegateExpr around the VarExpr.
negateAtom :: Parser Expr
negateAtom = failParse "not implemented"

-- TODO: Implement varExpr
-- parse a var expression, here we need to make sure that
-- the identifier is *not* a keyword before accepting it
-- i.e., we fail the parse if it is     
varExpr :: Parser Expr
varExpr = failParse "not implemented"

-- TODO: Implement ifExpr
-- parse an if-expression, which begins with the keyword if,
-- and is followed by three expressions
ifExpr :: Parser Expr
ifExpr = failParse "not implemented"

-- TODO: Implement let expressions  
-- a let expression begins with the keyword let, followed by
-- left parenthesis, then an identifier for the name 
-- to be bound, an expression to bind to that name, and a right
-- parenthesis, and then the body of the let expression
letExpr :: Parser Expr
letExpr = failParse "not implemented"

-- TODO: Implement lambdaExpr 
-- parse a lambda expression which is a lambda, argument, 
-- and body, with proper parenthesis around it
lambdaExpr :: Parser Expr
lambdaExpr = failParse "not implemented"

--TODO: Implement applyExpr
-- This expression consists of a function which is being applied to 
--   a parameter expression.
applyExpr :: Parser Expr
applyExpr = failParse "not implemented"

-- TODO: Add any newly added kinds of expression to be parsed here
-- the main parsing function which alternates between all 
-- the options for possible expressions
parseExpr :: Parser Expr
parseExpr = do
    parseAtom
    <|> parseParens notExpr
    <|> parseParens boolExpr
    <|> parseParens mathExpr
    <|> parseParens parseExpr
    <|> parseParens compExpr
    <|> parseParens pairExpr
    <|> parseParens consExpr 

-- End of additions to MiniRacketParser.hs for Part 2 of the
--   MiniRacketProject
